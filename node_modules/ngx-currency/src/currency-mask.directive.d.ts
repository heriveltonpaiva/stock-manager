import { AfterViewInit, DoCheck, ElementRef, KeyValueDiffer, KeyValueDiffers, OnInit } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import { CurrencyMaskConfig } from "./currency-mask.config";
import { InputHandler } from "./input.handler";
import * as ɵngcc0 from '@angular/core';
export declare const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR: any;
export declare class CurrencyMaskDirective implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit {
    private currencyMaskConfig;
    private elementRef;
    private keyValueDiffers;
    options: Partial<CurrencyMaskConfig>;
    inputHandler: InputHandler;
    keyValueDiffer: KeyValueDiffer<any, any>;
    optionsTemplate: CurrencyMaskConfig;
    constructor(currencyMaskConfig: CurrencyMaskConfig, elementRef: ElementRef, keyValueDiffers: KeyValueDiffers);
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnInit(): void;
    handleBlur(event: any): void;
    handleCut(event: any): void;
    handleInput(event: any): void;
    handleKeydown(event: any): void;
    handleKeypress(event: any): void;
    handlePaste(event: any): void;
    handleDrop(event: any): void;
    isChromeAndroid(): boolean;
    isReadOnly(): boolean;
    registerOnChange(callbackFunction: Function): void;
    registerOnTouched(callbackFunction: Function): void;
    setDisabledState(value: boolean): void;
    writeValue(value: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CurrencyMaskDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CurrencyMaskDirective, "[currencyMask]", never, {
    "options": "options";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVuY3ktbWFzay5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiY3VycmVuY3ktbWFzay5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgRWxlbWVudFJlZiwgS2V5VmFsdWVEaWZmZXIsIEtleVZhbHVlRGlmZmVycywgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBDdXJyZW5jeU1hc2tDb25maWcgfSBmcm9tIFwiLi9jdXJyZW5jeS1tYXNrLmNvbmZpZ1wiO1xuaW1wb3J0IHsgSW5wdXRIYW5kbGVyIH0gZnJvbSBcIi4vaW5wdXQuaGFuZGxlclwiO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgQ1VSUkVOQ1lNQVNLRElSRUNUSVZFX1ZBTFVFX0FDQ0VTU09SOiBhbnk7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDdXJyZW5jeU1hc2tEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgRG9DaGVjaywgT25Jbml0IHtcbiAgICBwcml2YXRlIGN1cnJlbmN5TWFza0NvbmZpZztcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBrZXlWYWx1ZURpZmZlcnM7XG4gICAgb3B0aW9uczogUGFydGlhbDxDdXJyZW5jeU1hc2tDb25maWc+O1xuICAgIGlucHV0SGFuZGxlcjogSW5wdXRIYW5kbGVyO1xuICAgIGtleVZhbHVlRGlmZmVyOiBLZXlWYWx1ZURpZmZlcjxhbnksIGFueT47XG4gICAgb3B0aW9uc1RlbXBsYXRlOiBDdXJyZW5jeU1hc2tDb25maWc7XG4gICAgY29uc3RydWN0b3IoY3VycmVuY3lNYXNrQ29uZmlnOiBDdXJyZW5jeU1hc2tDb25maWcsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGtleVZhbHVlRGlmZmVyczogS2V5VmFsdWVEaWZmZXJzKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIGhhbmRsZUJsdXIoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlQ3V0KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZUlucHV0KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZUtleWRvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlS2V5cHJlc3MoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlUGFzdGUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlRHJvcChldmVudDogYW55KTogdm9pZDtcbiAgICBpc0Nocm9tZUFuZHJvaWQoKTogYm9vbGVhbjtcbiAgICBpc1JlYWRPbmx5KCk6IGJvb2xlYW47XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShjYWxsYmFja0Z1bmN0aW9uOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoY2FsbGJhY2tGdW5jdGlvbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUodmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQ7XG59XG4iXX0=